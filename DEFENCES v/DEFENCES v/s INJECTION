DEFENCES v/s INJECTION
SQL Injection and XSS Defenses
Today, XSS and SQL Injection attacks are highly focused on filtering. This makes a certain amount of sense—both attack models are the same, though the targets differ. 

Figure 1: shows the attack models of various XSS and SQL injection attacks.
Stored XSS attacks involve injecting content through the application server into the underlying data store, where the injected script is eventually sent to the target browser. Reflected XSS attacks are usually instigated via some external program, like an email client, chat program, or SMS client that coerces the user to click on a specially-crafted URL with a script payload, which is reflected from an application server back to the client with the trust properties of the reflecting server. DOM XSS attacks inject a script payload into the browser DOM, where it is extracted and executed by the browser. Finally, SQL Injection attacks send specially-crafted data to the application server, which then forwards that data to the underlying data store where that data is interpreted as valid SQL directives. Note that the first stages of stored XSS and SQL Injection attacks are the same - injecting content into the data store.
All mainstream defenses against these attacks use filtering in one form or another but in very particular orders. OWASP goes into detail with respect to what kind of filtering happens in what order to defend against which types of attacks—suffice to say that it’s complex, and you see developers messing the order up all the time (Ever see “&” in a dynamic section of a web site? This is why). Escaping content is straightforward, even if the ways you need to combine the escaping isn’t, but it ends up being pretty obtuse. CSRF defenses are much more interesting and more difficult to understand.
